library(WGCNA)
library(ggplot2)
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
library(readr)
X41598_2022_12463_MOESM1_ESM_1_2_ <- read_csv("41598_2022_12463_MOESM1_ESM (1) (2).csv")
View(X41598_2022_12463_MOESM1_ESM_1_2_)
Klebsiella_expr =as.data.frame(Klebsiella[,4:ncol(X41598_2022_12463_MOESM1_ESM_1_2_)])
Klebsiella_expr =as.data.frame(X41598_2022_12463_MOESM1_ESM_1_2_[,4:ncol(X41598_2022_12463_MOESM1_ESM_1_2_)])
dim(Klebsiella_expr)
rownames(Klebsiella_expr) = X41598_2022_12463_MOESM1_ESM_1_2_[,2]
View(Klebsiella_expr)
View(X41598_2022_12463_MOESM1_ESM_1_2_)
rownames(Klebsiella_expr) = X41598_2022_12463_MOESM1_ESM_1_2_[-1,2]
head(X41598_2022_12463_MOESM1_ESM_1_2_[-1,2])
rownames(Klebsiella_expr) = as.vector(X41598_2022_12463_MOESM1_ESM_1_2_[-1,2])
head(as.vector(X41598_2022_12463_MOESM1_ESM_1_2_[-1,2])
)
rownames(Klebsiella_expr) = as.vector(X41598_2022_12463_MOESM1_ESM_1_2_[,2])
head(Gene_name)
head(X41598_2022_12463_MOESM1_ESM_1_2_$Gene_name)
rownames(Klebsiella_expr) = X41598_2022_12463_MOESM1_ESM_1_2_$Gene_name
Klebsiella_expr_t= t(Klebsiella_expr)
View(Klebsiella_expr_t)
gsg = goodSamplesGenes(Klebsiella_expr_t,verbose = 3)
dim(Klebsiella_expr_t)
dim(Klebsiella_expr)
if (!gsg$allOK)
{
Klebsiella_expr_t=Klebsiella_expr_t[gsg$goodSamples,gsg$goodGenes]
}
#Number of genes after filtering
dim(Klebsiella_expr_t)[2]
sampleTree = hclust(dist(Klebsiella_expr_t), method="average")
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,cex.axis = 1.5, cex.main = 1)
abline(h = 40000, col = "red")
powers = c(c(1:10), seq(from = 12, to=20, by=2))
sft = pickSoftThreshold(Klebsiella_expr_t, powerVector = powers, verbose = 5)
par(mfrow = c(1,2));
cex1 = 0.6;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",main = paste("Scale independence"));
text(sft$fitIndices[,1],-sign(sft$fitIndices[,3])*sft$fitIndices[,2],labels=powers,cex=cex1,col="red");
abline(h=0.90,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
net = blockwiseModules(Klebsiella_expr_t, power = 9, TOMType = "signed", minModuleSize = 15, reassignThreshold = 0, mergeCutHeight = 0.25, numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "Klebsiella_expr", verbose = 3)
table(net$colors)
mergedColors = labels2colors(net$colors)
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]], "Module colors",dendroLabels = FALSE, hang = 0.03,addGuide = TRUE, guideHang = 0.05)
head(net$dendrograms[[1]])
head(net$blockGenes[[1]]])
head(net$blockGenes[[1]])
as.data.frame(table(labels2colors(net$colors)))
# Assign modules to genes
moduleColors <- moduleColors  # Already generated by WGCNA
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree,file ="Klebsiella_expr.RData")
# Assign modules to genes
moduleColors <- moduleColors  # Already generated by WGCNA
nodeInfo <- data.frame(
node = colnames(datExpr),
module = moduleColors
)
# Assign modules to genes
moduleColors <- moduleColors  # Already generated by WGCNA
nodeInfo <- data.frame(
node = colnames(Klebsiella_expr_t),
module = moduleColors
)
write.table(nodeInfo, file = "coexpression_network_nodes.txt", sep = "\t", row.names = FALSE, quote = FALSE)
write.table(as.data.frame(table(labels2colors(net$colors))), file = "coexpression_freq.txt")
write.table(as.data.frame(X41598_2022_12463_MOESM1_ESM_1_2_$Gene_name), file = "coexpression_gene_names_full.txt")
head(MEs)
colorh1=moduleColors
#################################
which.module="black"
ME=datME[, paste("ME",which.module, sep="")]
dissimME=(1-t(cor(datME, method="p")))/2
datME=moduleEigengenes(Klebsiella_expr_t,moduleColors)$eigengenes
signif(cor(datME, use="p"), 2)
head(datME)
write.table(t(datME), file = "module_eigengenes.txt", sep = "\t", quote = FALSE, row.names = TRUE)
write.table(Klebsiella_expr, file = "exp_values_raw.txt", sep = "\t", quote = FALSE, row.names = TRUE)
savehistory("~/Downloads/WGCNA_for_descriptors.Rhistory")
